package knowledge

// GraphEmitter an emitter of full source graph
type GraphEmitter struct {
	eventBus chan SourceSubGraphUpdates
	source   string
	db       GraphDB
}

// NewGraphEmitter create an emitter of graph
func NewGraphEmitter(source string, eventBus chan SourceSubGraphUpdates, db GraphDB) *GraphEmitter {
	return &GraphEmitter{
		eventBus: eventBus,
		source:   source,
		db:       db,
	}
}

// CreateGraphUpdateTransaction create an updates oriented transaction.
func (e *GraphEmitter) CreateGraphUpdateTransaction() *GraphUpdateTransaction {
	return &GraphUpdateTransaction{
		eventBus: e.eventBus,
		source:   e.source,
		Updates:  *NewGraphUpdatesBulk(),
	}
}

// CreateCompleteGraphTransaction create a full graph transaction. This kind of transaction will diff the new graph
// with previous version of the graph generated by the source.
func (e *GraphEmitter) CreateCompleteGraphTransaction(currentGraph *SourceGraph) *CompleteGraphTransaction {
	transaction := new(CompleteGraphTransaction)
	transaction.eventBus = e.eventBus
	transaction.source = e.source
	transaction.newGraph = NewSourceGraph(e.source)
	transaction.binder = NewGraphBinder(transaction.newGraph)

	if currentGraph != nil {
		transaction.currentGraph = currentGraph
	}

	return transaction
}

func (e *GraphEmitter) Read() (*SourceGraph, error) {
	graph := NewGraph()
	if err := e.db.ReadGraph(e.source, graph); err != nil {
		return nil, err
	}
	sourceGraph := new(SourceGraph)
	sourceGraph.Graph = graph
	return sourceGraph, nil
}
